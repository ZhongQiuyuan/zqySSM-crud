<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

<!--  spring配置文件，这里主要配置与业务逻辑相关的内容  -->
<!--  核心点：数据源、mybatis的整合、事务控制  -->

    <!--配置spring包扫描，不扫描Controller-->
    <context:component-scan base-package="com.atguigu">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--  =============================数据源的配置=============================  -->
    <!--引入jdbc配置文件-->
    <context:property-placeholder location="classpath:dbconfig.properties" file-encoding="UTF-8"/>
    <!--引入druid数据源-->
    <bean id="pooledDataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driverClass}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!--============================配置和mybatis的整合==========================-->
    <!--SqlSessionFactoryBean, 用于创建SqlSessionFactory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--mybatis全局配置文件的位置-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!--指定数据源-->
        <property name="dataSource" ref="pooledDataSource"/>
        <!--指定mybatis mapper文件的位置-->
        <property name="mapperLocations" value="classpath:mapper/**/*.xml"/>
    </bean>

    <!--配置可以执行批量操作的SqlSession-->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>
        <constructor-arg name="executorType" value="BATCH"/>
    </bean>

    <!--MapperScannerConfigurer, 扫描指定包下的mapper接口, 创建实例并注册到Spring容器中-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--指定mapper接口所在的包-->
        <property name="basePackage" value="com.atguigu.crud.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!--==========================事务控制的配置===========================-->
    <!--1.创建事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--指定数据源-->
        <property name="dataSource" ref="pooledDataSource"/>
    </bean>

    <!--2.配置通知-->
    <!--实际增强的逻辑部分称为通知-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!--配置事务参数-->
        <tx:attributes>
            <!-- 指定哪种规则的方法上面添加事务 -->
            <!--所有方法都是事务,配置事务传播方式-->
            <tx:method name="*"/>
            <!--以get开始的所有方法-->
            <tx:method name="get*" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <!--3.配置切入点和切面-->
    <aop:config>
        <!--切入点表达式，实际被真正增强的方法-->
        <aop:pointcut id="txPoint" expression="execution(* com.atguigu.crud.service..*(..))"/>
        <!--配置切面,即把通知应用到切入点过程。将Pointcut和Advice关联起来-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
    </aop:config>


</beans>